[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(tidyverse)\n\n# Leer la hoja de Google Sheets\n# sheet_url <- \"https://docs.google.com/spreadsheets/d/e/2PACX-1vQFy-ameQXk6t28oLEGQN8jZ4xS1naprIubUXErAtal8qmdNSz91Q-siZ5hJNtYTfnoRLOL3Vex9B-V/pub?gid=0&single=true&output=csv\"\n# questions <- read_csv(sheet_url)\n# \n# write_csv(questions, \"data/questions.csv\")\n\nquestions <- read_csv(\"data/questions.csv\")\n\nui <- fluidPage(\n  titlePanel(\"Quiz App\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"num_questions\", \"Number of questions:\", min = 1, max = nrow(questions), value = 5),\n      actionButton(\"start_quiz\", \"Start Quiz\"),\n      br(),\n      textOutput(\"question_number\")\n    ),\n    mainPanel(\n      uiOutput(\"quiz_ui\"),\n      textOutput(\"score\"),\n      actionButton(\"submit\", \"Submit\"),\n      actionButton(\"next_question\", \"Next\"),\n      useShinyjs()  # Para usar shinyjs\n    )\n  )\n)\n\n# Definir la lógica del servidor (Server)\nserver <- function(input, output, session) {\n  selected_questions <- reactiveVal(data.frame())\n  question_index <- reactiveVal(0)\n  score <- reactiveVal(0)\n  show_answer <- reactiveVal(FALSE)\n  selected_option <- reactiveVal(NULL)\n  \n  observeEvent(input$start_quiz, {\n    num_questions <- input$num_questions\n    set.seed(123)  # Para reproducibilidad, opcional\n    selected_questions(questions[sample(nrow(questions), num_questions), ])\n    question_index(1)\n    score(0)\n    show_answer(FALSE)\n    selected_option(NULL)\n    load_question()\n  })\n  \n  load_question <- function() {\n    if (question_index() <= nrow(selected_questions())) {\n      question <- selected_questions()[question_index(), ]\n      output$quiz_ui <- renderUI({\n        question_text <- h3(question$question)\n        choices <- c(question$option_1, question$option_2, question$option_3, question$option_4)\n        if (!show_answer() || is.null(selected_option())) {\n          list(\n            question_text,\n            radioButtons(\"answers\", \"Options\", choices = choices, selected = selected_option())\n          )\n        } else {\n          correct_answer <- paste(\"Correct answer:\", question[[question$correct_answer]])\n          answer_color <- ifelse(selected_option() == question$correct_answer, \"green\", \"red\")\n          list(\n            question_text,\n            radioButtons(\"answers\", \"Options\", choices = choices, selected = selected_option()),\n            HTML(paste(\"<span style='color:\", answer_color, \"'>\", correct_answer, \"<\/span>\"))\n          )\n        }\n      })\n      output$question_number <- renderText({\n        paste(\"Question\", question_index(), \"of\", nrow(selected_questions()))\n      })\n    } else {\n      output$quiz_ui <- renderUI({\n        h3(\"Quiz Completed!\")\n      })\n      output$score <- renderText({\n        paste(\"Your final score is:\", score(), \"out of\", nrow(selected_questions()))\n      })\n      output$next_question <- renderUI({\n        NULL\n      })\n      output$submit <- renderUI({\n        NULL\n      })\n    }\n  }\n  \n  observeEvent(input$submit, {\n    selected_option(input$answers)\n    show_answer(TRUE)\n    shinyjs::toggleState(id = \"next_question\", condition = TRUE)\n    shinyjs::toggleState(id = \"submit\", condition = FALSE)\n  })\n  \n  observeEvent(input$next_question, {\n    question_index(question_index() + 1)\n    show_answer(FALSE)\n    shinyjs::toggleState(id = \"next_question\", condition = FALSE)\n    shinyjs::toggleState(id = \"submit\", condition = TRUE)\n    load_question()\n  })\n  \n  observeEvent(input$answers, {\n    selected_option(input$answers)\n  })\n  \n  observe({\n    if (question_index() > nrow(selected_questions())) {\n      shinyjs::toggleState(id = \"next_question\", condition = FALSE)\n      shinyjs::toggleState(id = \"submit\", condition = FALSE)\n    } else {\n      shinyjs::toggleState(id = \"next_question\", condition = FALSE)\n      shinyjs::toggleState(id = \"submit\", condition = TRUE)\n    }\n  })\n}\n\n\n\n# Iniciar la aplicación Shiny\nshinyApp(ui, server)\n\n\nshinylive::export(appdir = \"app\", destdir = \"docs\")\n\nhttpuv::runStaticServer(\"docs\", port=8008)\n","type":"text"}]
